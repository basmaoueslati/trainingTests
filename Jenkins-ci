pipeline {
    agent any
    environment {
        REPO_URL = "git@github.com:basmaoueslati/trainingTests.git"  
        BRANCH_NAME = "main"  // Update to your branch
    }
    stages {

        stage('Calculate Version') {
            steps {
                script {
                    // Read current version from POM
                    CURRENT_VERSION = sh(
                        script: 'mvn help:evaluate -Dexpression=revision -q -DforceStdout',
                        returnStdout: true
                    ).trim()
                    
                    // Parse and increment version
                    def parts = CURRENT_VERSION.split('\\.')
                    def newPatch = (parts[2] as Integer) + 1
                    NEXT_VERSION = "${parts[0]}.${parts[1]}.${newPatch}"
                    
                    echo "Updating version: ${CURRENT_VERSION} â†’ ${NEXT_VERSION}"

                }
            }
        }
        // Set version in POM
        stage('Set Version') {
            steps {
                sh "mvn versions:set-property -Dproperty=revision -DnewVersion=${NEXT_VERSION}"
                sh "mvn versions:commit"
                
                sh """
                # Configure Git user
                git config --local user.email "basma.oueslati@gmail.com"
                git config --local user.name "Jenkins"
                
                # Add and commit changes
                git add pom.xml
                git commit -m "Bump version to ${NEXT_VERSION}"
                """
            }
        }
        stage('Push Changes') {
            steps {
                sshagent(['github-ssh-key']) {  
                    sh """
                    git pull origin ${BRANCH_NAME} || true
                    git push origin HEAD:${BRANCH_NAME}
                    """
                }
            }
        }
     
        //Continuous Integration
        stage('Build') {
            steps {
                sh 'mvn clean package -DskipTests=true'
            }
        }
        stage('Test') {
            steps {
                sh 'mvn test'
            }
        }

        stage('sonar analysis') {
                    steps {
                    withSonarQubeEnv ("SonarQube"){
                        sh '''
                       mvn clean verify sonar:sonar \
                      -Dsonar.projectKey=compare-app \

                       '''
                    }
                    timeout(time: 15, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                    }
                        }    
        }

                //Continuous Delivery
        stage('Upload to nexus'){
            steps {
                nexusArtifactUploader artifacts: [
                    [
                        artifactId: 'numeric', classifier: '', 
                        file: "target/numeric-${NEXT_VERSION}.jar",  
                        type: 'jar'
                    ]
                ], 
                credentialsId: 'nexus', 
                groupId: 'com.devops', 
                nexusUrl: '15.188.146.236:8081', 
                nexusVersion: 'nexus3', 
                protocol: 'http', 
                repository: 'compare', 
                version: "${NEXT_VERSION}" 
            }
        }

        stage('Docker Build&Push') {
            steps {
                withDockerRegistry(credentialsId: 'docker', url: "") {
                    sh "docker build -t basmaoueslati/compare-appf25:${NEXT_VERSION} ."
                    sh "docker push basmaoueslati/compare-appf25:${NEXT_VERSION}"
                }
            }
        }
        stage('Clean Old Docker Images on Local') {
            steps {
                echo '___Cleaning up unused Docker images___'
                sh 'docker image prune -f'

                sh '''
                docker images --filter=reference='basmaoueslati/compare-appf25*' --format '{{.ID}} {{.Repository}}:{{.Tag}}' \
                  | awk '{print $1}' \
                  | xargs -r docker rmi -f
                '''
            }
        }
        stage('Clean Old Docker Images on Remote') {
            steps {
                echo '___Cleaning up old Docker images on remote server___'
                sh '''
                IMAGE_IDS=$(ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ubuntu@15.188.146.236 "docker images --filter=reference='basmaoueslati/compare-appf25*' --format '{{.ID}}'")

        
                for IMAGE_ID in $IMAGE_IDS; do
                    echo "Processing image ID: $IMAGE_ID"
        
                    # Get containers based on the image
                CONTAINERS=$(ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ubuntu@15.188.146.236 "docker ps -a -q --filter ancestor=$IMAGE_ID")
        
                    if [ -n "$CONTAINERS" ]; then
                        echo "Stopping and removing containers using image $IMAGE_ID"
                        ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ubuntu@15.188.146.236 "docker rm -f $CONTAINERS"

                    fi
        
                    # Attempt to remove the image
                    echo "Removing image $IMAGE_ID"
                    ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ubuntu@15.188.146.236 "docker rmi -f $IMAGE_ID" || echo "Could not remove image $IMAGE_ID"
                done
        
                echo "Pruning dangling images"
                ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ubuntu@15.188.146.236 "docker image prune -f"

                '''
            }
        }
        stage('Delete Old Container') {
            steps {
                echo 'Removing old container "myapp" on remote server if it exists...'
                sh '''
                ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ubuntu@15.188.146.236 "docker ps -a -q -f name=myapp" | grep . && \
                ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ubuntu@15.188.146.236 "docker rm -f myapp"  || echo "Container does not exist."
                '''
            }
        }
        //Continuous Deployment
        stage('Deploy') {
            steps {
        script {
            def version = NEXT_VERSION      
            sh """
            ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ubuntu@15.188.146.236 "docker run -d --name myapp -p 8086:8080 basmaoueslati/compare-appf25:${version}"
            """
        }
            }  
        }
    }
}
